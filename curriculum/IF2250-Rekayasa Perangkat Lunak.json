{
  "id": "IF2250",
  "points": "3 SKS",
  "syllabus": {
    "id": {
      "name": "Rekayasa Perangkat Lunak",
      "description": "Kuliah ini memberikan pengertian tentang rekayasa perangkat lunak dan kemampuan dasar dalam pembangunan perangkat lunak skala kecil dan sederhana, mencakup kemampuan melakukan analisis kebutuhan perangkat lunak dan perancangan perangkat lunak, mengoperasikan berbagai alat bantu terkait pemodelan hasil analisis dan perancangan, manajemen konfigurasi perangkat lunak, dan pengujian.",
      "syllabus": "Tipe perangkat lunak (P/L) pengantar rekayasa P/L; siklus hidup P/L, mencakup pengumpulan kebutuhan, analisis, perancangan, implementasi, pengujian, pengoperasian, dan perawatan; berbagai model proses,mencakup waterfall, prototyping, incremental, agile process model, dll; metodologi pembangunan P/L (termasuk metode berorientasi objek) kelebihan, kekurangan dan aspek praktisnya di industry, analisis dan perancangan P/L; standard dan dokumentasi P/L, mencakup SDD, SRS, SDD, STP;  alat bantu pemodelan P/L, mencakup UML dan DFD; manajemen konfigurasi perangkat lunak, termasuk version control; pengujian P/L mencakup perencanaan pengujian, perancangan kasus uji, dan alat bantu pengujian otomatis.",
      "outcomes": "Memahami berbagai semua istilah dan terminologi di bidang rekayasa perangkat lunakMemahami dan memilih model proses pembangunan perangkat lunakMemahami dan mengaplikasikan analisis dan perancangan perangkat lunak, berikut berbagai pemodelannya dengan berbagai alat bantuMemahami manajemen konfigurasi perangkat lunak, termasuk menggunakan alat bantunyaMerencanakan dan merancang pengujian perangkat lunak, termasuk mengenal alat bantu pengujian unit secara otomatis"
    },
    "en": {
      "name": "Software Engineering",
      "description": "This course provides an understanding of software engineering and basic skills in developing small scale and simple software, including software requirement analysis and design, the ability to use a variety of software modeling tools, software configuration management, and software testing.",
      "syllabus": "Types of Software; Introduction to Software Engineering, Software Development Life Cycle (SDLC) including requirement gathering, analysis, design coding, testing, operation, and maintenance; Software Process Model, including waterfall, prototyping, incremental, agile process model, etc; Software Development Methodologies (including OO Software Development Methods) advantages and disadvantages, and practices in industry, software analysis and design; Software Standard and Documentation, including SDP, SRS, SDD, STP; Software Modeling Tools, including UML and DFD; Software Configuration Management, including version control; Software Testing, including test plan, test case, and automatic unit testing tools.",
      "outcomes": "To understand various terms and terminology in the field of software engineeringTo understand several process models of software development and to select the appropriate process modelTo understand and to apply software analysis and design, including to build the model using various toolsTo understand software configuration management, including to use the supporting toolsTo build a test plan and to design test cases, including using automatic unit testing tools"
    }
  }
}
